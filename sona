#! /usr/bin/python

'''
 Copyright 2019-present SK Telecom
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
'''

import os
import shlex
import sys
import time
import json
import requests
import subprocess
import pyroute2
import ConfigParser
import socket
import struct
import random
import netifaces
import ipaddress
from netaddr import *
from random import randint
from kubernetes import client, config

CNI_VERSION = "0.3.1"
SUPPORTED_VERSIONS = [ "0.1.0", "0.2.0", "0.3.0", "0.3.1" ]
INSIDE_MTU = 1400

ONOS_USERNAME = "onos"
ONOS_PASSWORD = "rocks"
ONOS_PORT_NUM = "8181"
ONOS_K8S_NODE_PATH = "onos/k8snode"
ONOS_K8S_NETWORKING_PATH = "onos/k8snetworking"

SONA_CONFIG_FILE = "/etc/sona/sona-cni.conf"
INT_BRIDGE = "kbr-int"
EXT_BRIDGE = "kbr-ex"
LOCAL_BRIDGE = "kbr-local"

INT_TO_EXT_PATCH_PORT = "kbr-int-ex"
EXT_TO_INT_PATCH_PORT = "phy-kbr-ex"

VETH_PREFIX = "veth"
ETH_PREFIX = "eth"

DEFAULT_TRANSIENT_CIDR = "172.10.0.0/16"
DEFAULT_TRANSIENT_LOCAL_CIDR = "172.11.0.0/16"
DEFAULT_SERVICE_CIDR = "10.96.0.0/12"
DEFAULT_FAKE_MAC = "fe:00:00:00:00:20"

def call_popen(cmd):
    '''
    Executes a shell command.

    :param    cmd: shell command to be executed
    :return    standard output of the executed result
    '''
    child = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    output = child.communicate()
    if child.returncode:
        raise RuntimeError("Fatal error executing %s" % (cmd))
    if len(output) == 0 or output[0] is None:
        output = ""
    else:
        output = output[0].decode("utf8").strip()
    return output

def call_prog(prog, args_list):
    '''
    Executes shell command along with a set of arguments.

    :param    prog:      program binary path
                args_list: arguments of the program
    :return    standard output of the executed result
    '''
    cmd = [prog, "--timeout=5", "-vconsole:off"] + args_list
    return call_popen(cmd)

def ovs_vsctl(*args):
    '''
    A helper method to execute ovs-vsctl.

    :param    args:     arguments pointer
    :return    executed result of ovs-vsctl
    '''
    return call_prog("ovs-vsctl", list(args))

def ovs_ofctl(*args):
    '''
    A helper method to execute ovs-ofctl.

    :param    args:    arguments pointer
    :return    executed result of ovs-ofctl
    '''
    return call_prog("ovs-ofctl", list(args))

def master_ip():
    '''
    A helper method to retrieve Kubernetes master IP address.

    :return    Kubernetes master IP address
    '''
    config.load_kube_config()

    api_instance = client.CoreV1Api()

    master_str = "node-role.kubernetes.io/master"

    node_list = api_instance.list_node()

    for node in node_list.items:
        node_labels = node.metadata.labels
        for labels in node_labels:
            # TODO: need to check whether the given master node has SONA POD
            if master_str in labels:
                return get_node_address(node)
    return None

def get_node_address(node):
    '''
    A helper method to retrieve Kubernetes IP address from the given node.

    :param    node: kubernetes node
    :return   Kubernetes node's IP address
    '''
    node_status = node.status
    for address in node_status.addresses:
        if address.type == "InternalIP":
            return address.address
    return None

def request(ep_type, endpoint, method, data):
    '''
    A helper method to issue REST API call.

    :param     ep_type:    REST endpoint type (e.g., node, networking)
               endpoint:   REST endpoint
               method:     REST method
               data:       REST data
    :return    REST response
    '''

    path = ""
    if ep_type == "node":
        path = ONOS_K8S_NODE_PATH
    elif ep_type == "networking":
        path = ONOS_K8S_NETWORKING_PATH
    else:
        path = ONOS_K8S_NODE_PATH

    url = "http://" + master_ip() + ":" + ONOS_PORT_NUM + "/" + path
    url = url + "/" + endpoint

    username = ONOS_USERNAME
    password = ONOS_PASSWORD

    headers = {}
    headers['Content-Type'] = 'application/json'
    session = requests.session()

    if method == "get":
        resp = session.get(url, auth=(username, password))
    elif method == "post":
        resp = session.post(url, data.encode('utf-8'), headers=headers, auth=(username, password))
    elif method == "put":
        if data is None:
            data = {}
            data = json.dumps(data)
        resp = session.put(url, data.encode('utf-8'), headers=headers, auth=(username, password))
    elif method == "delete":
        resp = session.delete(url, auth=(username, password))
    else:
        print("The given method is not supported.")
        return None

    return resp

def update_post_on_board_state():
    '''
    Updates the kubernetes node's state.
    '''
    node_name = socket.gethostname()
    resp = request("node", "configure/update/postonboard/" + node_name, "put", None)

def update_ovs_bridge_mtu():
    '''
    Updates the OpenvSwitch bridge's own interface MTU request size.
    '''
    mtu = get_mtu()
    mtu_str = "mtu=" + str(mtu)
    mtu_req_str = "mtu_request=" + str(mtu)
    ovs_vsctl('set', 'int', INT_BRIDGE, mtu_str)
    ovs_vsctl('set', 'int', INT_BRIDGE, mtu_req_str)
    ovs_vsctl('set', 'int', EXT_BRIDGE, mtu_str)
    ovs_vsctl('set', 'int', EXT_BRIDGE, mtu_req_str)
    ovs_vsctl('set', 'int', LOCAL_BRIDGE, mtu_str)
    ovs_vsctl('set', 'int', LOCAL_BRIDGE, mtu_req_str)

def is_on_boarded_state():
    '''
    Obtains the kubernetes node's state.
    '''
    node_name = socket.gethostname()
    resp = request("node", "configure/state/" + node_name, "get", None)

    if resp is None:
        return False
    else:
        result = resp.json()
        return result["State"] == "ON_BOARDED"

def create_port(port_id, mac_address, ip_address):
    '''
    Creates a container port.

    :param    port_id:    port identifier
                mac_address:    MAC address
                ip_address:    IP address
    :return    REST response
    '''
    network_id = get_network_id()
    dpid = get_dpid()

    data = json.dumps({"portId": port_id, "networkId": network_id,
                       "macAddress": mac_address, "ipAddress": ip_address,
                       "deviceId": dpid})

    resp = request("networking", "port", "post", data)

def delete_port(port_id):
    '''
    Deletes a container port.

    :param    port_id:    port identifier
    :return    REST response
    '''
    endpoint = "port/" + port_id
    resp = request("networking", endpoint, "delete", None)

def has_network():
    '''
    Checks the existence of the network with given network identifier.

    :return true if network has already been existed in control plane, false otherwise
    '''
    cf = ConfigParser.ConfigParser()
    cf.read(SONA_CONFIG_FILE)

    net_id = socket.gethostname()
    endpoint = "network" + "/" + "exist" + "/" + net_id
    resp = request("networking", endpoint, "get", None)

    if resp is None:
        return False
    else:
        result = resp.json()
        return result["result"]

def get_network_id():
    '''
    Obtains the network identifier.

    :return    network identifier
    '''
    try:
        return socket.gethostname()

    except Exception as e:
        raise SonaCniException(102, "failure get network ID " + str(e))

def get_dpid():
    '''
    Obtains the data plane identifier.

    :return    data plane identifier
    '''
    try:
        of_result = ovs_ofctl('show', INT_BRIDGE)

        if "dpid:" in of_result:
            first_line = of_result.splitlines()[0]
            return "of:" + first_line.split("dpid:", 1)[1]
        else:
            return None

    except Exception as e:
        raise SonaCniException(105, "failure get DPID " + str(e))

def get_gateway_ip():
    '''
    Obtains the overlay gateway IP address.

    :return     gateway IP address
    '''
    cidr = get_cidr()

    if cidr is not None:
        network = ipaddress.ip_network(cidr.decode('unicode_escape'))
        return  str(network[1])

def get_cidr():
    '''
    Obtains the network CIDR.

    :return     network CIDR
    '''
    node_name = socket.gethostname()
    config.load_kube_config()
    v1 = client.CoreV1Api()
    node = v1.read_node(name=node_name)
    if node is not None:
        return node.spec.pod_cidr
    else:
        return None

def get_global_cidr():
    '''
    Obtains the network global CIDR.

    :return     network global CIDR
    '''
    cidr = get_cidr()

    if cidr is not None:
        network = ipaddress.ip_network(cidr.decode('unicode_escape'))
        super_net = network.supernet(new_prefix=16)
        return str(super_net)

def get_transient_cidr():
    '''
    Obtains the transient network CIDR.

    :return     transient network CIDR
    '''
    try:
        cf = ConfigParser.ConfigParser()
        cf.read(SONA_CONFIG_FILE)
        if cf.has_option("network", "transient_cidr") is True:
            return cf.get("network", "transient_cidr")
        else:
            return DEFAULT_TRANSIENT_CIDR

    except Exception as e:
        raise SonaCniException(102, "failure get transient CIDR " + str(e))

def get_transient_local_cidr():
    '''
    Obtains the transient local network CIDR.
    :return     transient local network CIDR
    '''
    try:
        cf = ConfigParser.ConfigParser()
        cf.read(SONA_CONFIG_FILE)
        if cf.has_option("network", "transient_local_cidr") is True:
            return cf.get("network", "transient_local_cidr")
        else:
            return DEFAULT_TRANSIENT_LOCAL_CIDR

    except Exception as e:
        raise SonaException(102, "failure get transient local CIDR " + str(e))

def get_service_cidr():
    '''
    Obtains the service network CIDR.

    :return     service network CIDR
    '''
    try:
        cf = ConfigParser.ConfigParser()
        cf.read(SONA_CONFIG_FILE)
        if cf.has_option("network", "service_cidr") is True:
            return cf.get("network", "service_cidr")
        else:
            return DEFAULT_SERVICE_CIDR

    except Exception as e:
        raise SonaCniException(102, "failure get service CIDR " + str(e))

def get_external_interface():
    '''
    Obtains the external interface name.

    :return     external interface name
    '''
    try:
        cf = ConfigParser.ConfigParser()
        cf.read(SONA_CONFIG_FILE)
        if cf.has_option("network", "external_interface") is True:
            return cf.get("network", "external_interface")
        else:
            return None

    except Exception as e:
        raise SonaCniException(102, "failure get external interface " + str(e))

def get_external_bridge_ip():
    '''
    Obtains the external IP address.

    :return	external IP address
    '''
    return netifaces.ifaddresses(EXT_BRIDGE)[netifaces.AF_INET][0]['addr']

def get_external_gateway_ip():
    '''
    Obtains the external gateway IP address.

    :return    external gateway IP address
    '''
    try:
        cf = ConfigParser.ConfigParser()
        cf.read(SONA_CONFIG_FILE)
        if cf.has_option("network", "external_gateway_ip") is True:
            return cf.get("network", "external_gateway_ip")
        else:
            return None

    except Exception as e:
        raise SonaCniException(102, "failure get external gateway IP " + str(e))

def get_mtu():
    '''
    Obtains the default MTU size of all container and bridge interfaces.

    :return	default MTU size
    '''
    try:
        cf = ConfigParser.ConfigParser()
        cf.read(SONA_CONFIG_FILE)
        if cf.has_option("network", "mtu") is True:
            return cf.get("network", "mtu")
        else:
            return INSIDE_MTU

    except Exception as e:
        raise SonaCniException(102, "failure get MTU size " + str(e))

def allocate_ip(network_id):
    '''
    Allocates a new IP address.

    :param   network_id:    network identifier
    :return  allocated_ip:    a newly allocated IP address
    '''

    endpoint = "ipam" + "/" + network_id

    try:
        ipamJson = request("networking", endpoint, "get", None).json()
        allocated_ip = ipamJson["ipam"]["ipAddress"]

    except Exception as e:
        raise SonaCniException(106, "failure get allocated IP " + str(e))

    return allocated_ip

def release_ip(ip):
    '''
    Releases an existing IP address.

    :param  ip:   IP address to be released
    '''

    try:
        network_id = socket.gethostname()
        endpoint = "ipam" + "/" + network_id + "/" + ip
        request("networking", endpoint, "delete", None)

    except Exception as e:
        raise SonaCniException(106, "failure release IP " + str(e))

def is_interface_up(interface):
    '''
    Checks whether the given network interface is up or not.
    '''
    addr = netifaces.ifaddresses(interface)
    return netifaces.AF_INET in addr

def has_interface(interface):
    '''
    Checks whether the machine has the given network interface.
    '''
    detail = netifaces.ifaddresses(interface)
    if detail is None:
        return False
    else:
        return True

def activate_ex_intf():
    '''
    Activates the external interface.
    '''
    ipdb = pyroute2.IPDB(mode='explicit')
    ex_intf = get_external_interface()
    ex_gw_ip = get_external_gateway_ip()

    if ex_intf is None:
        return

    if ex_gw_ip is None:
        return

    if has_interface(ex_intf) is False:
        return

    intfs = ovs_vsctl('list-ifaces', EXT_BRIDGE)
    if ex_intf in intfs:
        return

    try:
        ext_ip_address = "127.0.0.1/24"
        ext_mac_address = "02:11:22:33:44:55"
        empty_ip_address = "0.0.0.0"
        with ipdb.interfaces[ex_intf] as ext_iface:
            ipv4_addr = ext_iface.ipaddr.ipv4
            if not ipv4_addr:
                print "External interface does not have any IP address"
                return
            ext_ip_address = ipv4_addr[0]["address"] + '/' + str(ipv4_addr[0]["prefixlen"])
            ext_mac_address = ext_iface.address
            for addr in ext_iface.ipaddr:
                addr_str = '/'.join(map(str, addr))
                ext_iface.del_ip(addr_str)

        with ipdb.interfaces[EXT_BRIDGE] as ext_bridge_iface:
            for addr in ext_bridge_iface.ipaddr:
                addr_str = '/'.join(map(str, addr))
                ext_bridge_iface.del_ip(addr_str)

            ext_bridge_iface.add_ip(ext_ip_address)
            addr_config_str = 'other-config:hwaddr=\"' + ext_mac_address + '\"'
            if ext_bridge_iface.operstate == "DOWN":
                ext_bridge_iface.up()

            ovs_vsctl('set', 'bridge', EXT_BRIDGE, addr_config_str)

        if ex_intf not in intfs:
            ovs_vsctl('add-port', EXT_BRIDGE, ex_intf)

    except Exception as e:
        raise SonaException(108, "failure activate external interface " + str(e))

def activate_gw_intf():
    '''
    Activates the host default gateway interface.
    '''
    ipdb = pyroute2.IPDB(mode='explicit')
    cidr = get_cidr()
    gw_ip = get_gateway_ip()
    global_cidr = get_global_cidr()
    transient_cidr = get_transient_cidr()
    transient_local_cidr = get_transient_local_cidr()
    service_cidr = get_service_cidr()

    try:
        with ipdb.interfaces[INT_BRIDGE] as bridge_iface:
            for addr in bridge_iface.ipaddr:
                addr_str = '/'.join(map(str, addr))
                bridge_iface.del_ip(addr_str)

            bridge_iface.add_ip(gw_ip + '/' + cidr.split('/')[1])
            if bridge_iface.operstate == "DOWN":
                bridge_iface.up()

	with ipdb.interfaces[LOCAL_BRIDGE] as bridge_iface:
            if bridge_iface.operstate == "DOWN":
                bridge_iface.up()

            addr_config_str = 'other-config:hwaddr=\"' + DEFAULT_FAKE_MAC + '\"'
            ovs_vsctl('set', 'bridge', LOCAL_BRIDGE, addr_config_str)

        local_found = False
        global_found = False
        transient_found = False
        service_found = False
	transient_local_found = False

        for route in ipdb.routes:
            if route['dst'] == cidr:
                local_found = True
            if route['dst'] == global_cidr:
                global_found = True
            if route['dst'] == transient_cidr:
                transient_found = True
            if route['dst'] == service_cidr:
                service_found = True
            if route['dst'] == transient_local_cidr:
                transient_local_found = True

        if not local_found:
            ipdb.routes.add(dst=cidr, oif=ipdb.interfaces[INT_BRIDGE].index).commit()

        if not global_found:
            ipdb.routes.add(dst=global_cidr, oif=ipdb.interfaces[INT_BRIDGE].index).commit()

        if not transient_found:
            ipdb.routes.add(dst=transient_cidr, oif=ipdb.interfaces[INT_BRIDGE].index).commit()

        if not service_found:
            ipdb.routes.add(dst=service_cidr, oif=ipdb.interfaces[INT_BRIDGE].index).commit()

	if not transient_local_found:
            ipdb.routes.add(dst=transient_local_cidr, oif=ipdb.interfaces[LOCAL_BRIDGE].index).commit()

    except Exception as e:
        raise SonaException(108, "failure activate gateway interface " + str(e))

def setup_interface(container_id, cni_netns, cni_ifname,
                    mac_address, ip_address):
    '''
    Sets up the host interface and container interface.
    Note that host interface is referred as outside-interface, while
    container interface is referred as inside-interface.

    :param  container_id:   container identifier
            cni_netns:      CNI network namespace
            cni_ifname:     CNI interface name
            mac_address:    MAC address
            ip_address:     IP address with CIDR attached (e.g., 10.10.10.2/24)

    '''
    try:
        if not os.path.exists("/var/run/netns"):
            os.makedirs("/var/run/netns")
    except Exception as e:
        raise SonaCniException(100, "failure in creation of netns directory")

    try:
        ipdb = pyroute2.IPDB(mode='explicit')
        veth_outside = VETH_PREFIX + container_id[:11]
        veth_inside = ETH_PREFIX + container_id[:12]
        ipdb.create(ifname=veth_outside, kind='veth', peer=veth_inside)
        with ipdb.interfaces[veth_outside] as veth_outside_iface:
            # Up the outer interface
            veth_outside_iface.up()
            veth_outside_idx = veth_outside_iface.index

        # Create a link for the container namespace
        # This is necessary also when using pyroute2
        # See https://github.com/svinota/pyroute2/issues/290
        netns_dst = "/var/run/netns/%s" % container_id
        if not os.path.isfile(netns_dst):
            command = "ln -s %s %s" % (cni_netns, netns_dst)
            call_popen(shlex.split(command))

        with ipdb.interfaces[veth_inside] as veth_inside_iface:
            # Move the inner veth inside the container namespace
            veth_inside_iface.net_ns_fd = container_id

    except Exception as e:
        raise SonaCniException(100, "veth pair setup failure" + str(e))

    try:
        # Change the name of veth_inside to $cni_ifname
        ns_ipdb = pyroute2.IPDB(nl=pyroute2.NetNS(container_id),
                                mode='explicit')
        ifindex = 0
        # Configure veth_inside: set name, mtu, mac address, ip, and bring up
        with ns_ipdb.interfaces[veth_inside] as veth_inside_iface:
            ifindex = veth_inside_iface.index
            veth_inside_iface.ifname = cni_ifname
            veth_inside_iface.address = mac_address
            veth_inside_iface.mtu = INSIDE_MTU
            veth_inside_iface.add_ip(ip_address)
            veth_inside_iface.up()

        # Set the gateway
        ns_ipdb.routes.add(dst='default', oif=ifindex).commit()

        return veth_outside
    except Exception as e:
        if veth_outside_idx:
            pyroute2.IPRoute().link('del', index=veth_outside_idx)
        raise SonaCniException(100, "container interface setup failure" + str(e))

def randomMAC():
    '''
    Randomly generates MAC address.

    :return MAC address
    '''
    mac = [ 0x52, 0x54, 0x00,
            random.randint(0x00, 0x7f),
            random.randint(0x00, 0xff),
            random.randint(0x00, 0xff) ]
    return ':'.join(map(lambda x: "%02x" % x, mac))

def cni_add(cni_ifname, cni_netns, namespace, pod_name, container_id):
    '''
    Adds OVS interface port when receiving CNI add command.

    :param  cni_ifname:     CNI interface name
            cni_netns:      CNI network name space
            namespace:      namespace
            pod_name:       container POD name
            container_id:   container identifier

    '''
    if has_network() is False:
        return

    if is_on_boarded_state() is True:
        activate_gw_intf()
        activate_ex_intf()
        update_post_on_board_state()
        update_ovs_bridge_mtu()

    ip_address = allocate_ip(get_network_id())
    local_cidr = get_cidr()
    ip_address = ip_address + '/' + local_cidr.split('/')[1]
    mac_address = randomMAC()

    veth_outside = setup_interface(container_id, cni_netns, cni_ifname,
                                   mac_address, ip_address)

    iface_id = "%s_%s" % (namespace, pod_name)

    create_port(container_id[:31], mac_address, ip_address.split('/')[0])

    try:
        ovs_vsctl('add-port', INT_BRIDGE, veth_outside, '--', 'set',
                  'interface', veth_outside,
                  'external_ids:attached_mac=%s' % mac_address,
                  'external_ids:iface-id=%s' % iface_id,
                  'external_ids:ip_address=%s' % ip_address)
    except Exception as e:
        raise SonaCniException(106, "failure in plugging pod interface" + str(e))

    output = json.dumps({'ip_address': ip_address, 'mac_address': mac_address})
    print(output)

def cni_del(container_id, cni_ifname):
    '''
    Removes OVS interface port when receiving CNI remove command.

    :param  container_id:   container identifier
            cni_ifname:     CNI interface name

    '''
    if has_network() is False:
        return

    veth_outside = VETH_PREFIX + container_id[:11]
    ports = ovs_vsctl("list-ports", INT_BRIDGE)

    if veth_outside not in ports:
        return

    ovs_vsctl("del-port", veth_outside)

    ipv4_address = '127.0.0.1'

    ns_ipdb = pyroute2.IPDB(nl=pyroute2.NetNS(container_id),
                            mode='explicit')
    with ns_ipdb.interfaces[cni_ifname] as inside_iface:
        ipv4_address = inside_iface.ipaddr.ipv4[0]['address']
    ns_ipdb.release()

    release_ip(ipv4_address)

    delete_port(container_id[:31])

    command = "rm -f /var/run/netns/%s" % container_id
    call_popen(shlex.split(command))

def cni_version():
    '''
    Prints CNI strings along with version when receiving CNI version command.
    '''
    json_data = {'cniVersion': CNI_VERSION,
                 'supportedVersions': SUPPORTED_VERSIONS}
    print(json.dumps(json_data))

def main():
    update_ovs_bridge_mtu()

class SonaCniException(Exception):

    def __init__(self, code, message, details=None):
        '''
        The exception constructor which handles the SONA CNI related exceptions.

        :param  code:       exception code
                message:    exception message
                details:    detailed message of this exception
        '''
        super(SonaCniException, self).__init__("%s - %s" % (code, message))
        self._code = code
        self._msg = message
        self._details = details

    def cni_error(self):
        '''
        Handles the CNI related errors.

        :return  exception details including CNI version, code and message
        '''
        error_data = {'cniVersion': CNI_VERSION,
                      'code': self._code,
                      'message': self._msg}
        if self._details:
            error_data['details'] = self._details
        return json.dumps(error_data)

if __name__ == '__main__':
    try:
        main()
    except SonaCniException as e:
        print(e.cni_error())
        sys.exit(1)
    except Exception as e:
        error = {'cniVersion': CNI_VERSION, 'code': 200,
                 'message': str(e)}
        print(json.dumps(error))
        sys.exit(1)
